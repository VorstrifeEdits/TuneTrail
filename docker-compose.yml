# TuneTrail Community Edition - Docker Compose
# For development and self-hosted deployment

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: tunetrail-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-tunetrail}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_me_secure_password_123}
      POSTGRES_DB: ${POSTGRES_DB:-tunetrail_community}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-tunetrail}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tunetrail-network
    restart: unless-stopped

  # Redis for caching and task queue
  redis:
    image: redis:7.4-alpine
    container_name: tunetrail-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-change_me_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tunetrail-network
    restart: unless-stopped

  # MinIO for local S3-compatible storage
  minio:
    image: minio/minio:RELEASE.2024-09-22T00-33-43Z
    container_name: tunetrail-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY:-change_me_minio_password}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - tunetrail-network
    restart: unless-stopped

  # FastAPI Backend API
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    container_name: tunetrail-api
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-tunetrail}:${POSTGRES_PASSWORD:-change_me_secure_password_123}@postgres:5432/${POSTGRES_DB:-tunetrail_community}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-change_me_redis_password}@redis:6379/0
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=${S3_ACCESS_KEY:-minioadmin}
      - S3_SECRET_KEY=${S3_SECRET_KEY:-change_me_minio_password}
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_minimum_32_characters_long}
      - EDITION=community
      - ENVIRONMENT=${ENVIRONMENT:-development}
    volumes:
      - ./services/api:/app
      - model_cache:/models
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tunetrail-network
    restart: unless-stopped

  # ML Engine for recommendations
  ml-engine:
    build:
      context: ./services/ml-engine
      dockerfile: Dockerfile
    container_name: tunetrail-ml-engine
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-tunetrail}:${POSTGRES_PASSWORD:-change_me_secure_password_123}@postgres:5432/${POSTGRES_DB:-tunetrail_community}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-change_me_redis_password}@redis:6379/0
      - MODEL_TIER=${MODEL_TIER:-basic}
      - ENABLE_GPU=${ENABLE_GPU:-false}
      - TORCH_HOME=/models
    volumes:
      - ./services/ml-engine:/app
      - model_cache:/models
      - audio_features:/features
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tunetrail-network
    restart: unless-stopped

  # Audio Processor for feature extraction
  audio-processor:
    build:
      context: ./services/audio-processor
      dockerfile: Dockerfile
    container_name: tunetrail-audio-processor
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-tunetrail}:${POSTGRES_PASSWORD:-change_me_secure_password_123}@postgres:5432/${POSTGRES_DB:-tunetrail_community}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-change_me_redis_password}@redis:6379/1
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=${S3_ACCESS_KEY:-minioadmin}
      - S3_SECRET_KEY=${S3_SECRET_KEY:-change_me_minio_password}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-change_me_redis_password}@redis:6379/1
    volumes:
      - ./services/audio-processor:/app
      - audio_features:/features
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - tunetrail-network
    restart: unless-stopped

  # Next.js Frontend
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
    container_name: tunetrail-frontend
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost:8000}
      - NEXT_PUBLIC_EDITION=community
    volumes:
      - ./services/frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - tunetrail-network
    restart: unless-stopped

  # Celery Worker for background tasks
  celery-worker:
    build:
      context: ./services/audio-processor
      dockerfile: Dockerfile
    container_name: tunetrail-celery-worker
    command: celery -A processor worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-tunetrail}:${POSTGRES_PASSWORD:-change_me_secure_password_123}@postgres:5432/${POSTGRES_DB:-tunetrail_community}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-change_me_redis_password}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-change_me_redis_password}@redis:6379/2
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=${S3_ACCESS_KEY:-minioadmin}
      - S3_SECRET_KEY=${S3_SECRET_KEY:-change_me_minio_password}
    volumes:
      - ./services/audio-processor:/app
      - audio_features:/features
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - tunetrail-network
    restart: unless-stopped

networks:
  tunetrail-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  model_cache:
    driver: local
  audio_features:
    driver: local