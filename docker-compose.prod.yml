# TuneTrail Production Edition - Docker Compose
# Optimized for production deployment with security hardening

services:
  # PostgreSQL with production optimizations
  postgres:
    image: pgvector/pgvector:pg16
    container_name: tunetrail-postgres-prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
      # Production optimizations
      POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c log_statement=all
      -c log_min_duration_statement=1000
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - tunetrail-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Redis with persistence and clustering
  redis:
    image: redis:7.4-alpine
    container_name: tunetrail-redis-prod
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - tunetrail-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # MinIO with production settings
  minio:
    image: minio/minio:RELEASE.2024-09-22T00-33-43Z
    container_name: tunetrail-minio-prod
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
      MINIO_PROMETHEUS_AUTH_TYPE: public
      MINIO_PROMETHEUS_URL: http://prometheus:9090
      MINIO_COMPRESS: "true"
      MINIO_COMPRESS_EXTENSIONS: .pdf,.doc,.docx,.zip
    volumes:
      - minio_data:/data
      - ./minio/policy.json:/etc/minio/policy.json:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 120s
    networks:
      - tunetrail-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # FastAPI Backend with production optimizations
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile.prod
      target: production
    container_name: tunetrail-api-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - ML_ENGINE_URL=http://ml-engine:8001
      - EDITION=community
      - ENVIRONMENT=production
      - DEBUG=false
      - UVICORN_WORKERS=4
      - UVICORN_HOST=0.0.0.0
      - UVICORN_PORT=8000
      - UVICORN_LOG_LEVEL=info
    volumes:
      - model_cache:/models
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ml-engine:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - tunetrail-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # ML Engine with GPU support and production settings
  ml-engine:
    build:
      context: ./services/ml-engine
      dockerfile: Dockerfile.prod
      target: production
    container_name: tunetrail-ml-engine-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - MODEL_TIER=${MODEL_TIER:-premium}
      - ENABLE_GPU=${ENABLE_GPU:-false}
      - TORCH_HOME=/models
      - OMP_NUM_THREADS=4
      - MKL_NUM_THREADS=4
      - UVICORN_WORKERS=2
      - UVICORN_HOST=0.0.0.0
      - UVICORN_PORT=8001
    volumes:
      - model_cache:/models
      - audio_features:/features
      - ./logs:/app/logs
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 120s
    networks:
      - tunetrail-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Next.js Frontend with production optimizations
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile.prod
      target: production
    container_name: tunetrail-frontend-prod
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-https://api.tunetrail.app}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-wss://api.tunetrail.app}
      - NEXT_PUBLIC_EDITION=community
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - tunetrail-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: tunetrail-nginx-prod
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - tunetrail-network
    restart: unless-stopped

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: tunetrail-prometheus-prod
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - tunetrail-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: tunetrail-grafana-prod
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - tunetrail-network
    restart: unless-stopped

networks:
  tunetrail-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/tunetrail/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/tunetrail/redis
  minio_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/tunetrail/minio
  model_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/tunetrail/models
  audio_features:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/tunetrail/features
  prometheus_data:
    driver: local
  grafana_data:
    driver: local